function path = A_star_search(map,MAX_X,MAX_Y)
%%
%This part is about map/obstacle/and other settings
    %pre-process the grid map, add offset
    size_map = size(map,1);
    Y_offset = 0;
    X_offset = 0;
    
    %Define the 2D grid map array.
    %Obstacle=-1, Target = 0, Start=1
    MAP=2*(ones(MAX_X,MAX_Y));
    
    %Initialize MAP with location of the target
    xval=floor(map(size_map, 1)) + X_offset;
    yval=floor(map(size_map, 2)) + Y_offset;
    xTarget=xval;
    yTarget=yval;
    MAP(xval,yval)=0;
    
    %Initialize MAP with location of the obstacle
    for i = 2: size_map-1
        xval=floor(map(i, 1)) + X_offset;
        yval=floor(map(i, 2)) + Y_offset;
        MAP(xval,yval)=-1;
    end 
    
    %Initialize MAP with location of the start point
    xval=floor(map(1, 1)) + X_offset;
    yval=floor(map(1, 2)) + Y_offset;
    xStart=xval;
    yStart=yval;
    MAP(xval,yval)=1;

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %LISTS USED FOR ALGORITHM
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %OPEN LIST STRUCTURE
    %--------------------------------------------------------------------------
    %IS ON LIST 1/0 |X val |Y val |Parent X val |Parent Y val |h(n) |g(n)|f(n)|
    %--------------------------------------------------------------------------
    OPEN=[];
    %CLOSED LIST STRUCTURE
    %--------------
    %X val | Y val |
    %--------------
    % CLOSED=zeros(MAX_VAL,2);
    CLOSED=[];

    %Put all obstacles on the Closed list
    k=1;%Dummy counter
    for i=1:MAX_X
        for j=1:MAX_Y
            if(MAP(i,j) == -1)
                CLOSED(k,1)=i;
                CLOSED(k,2)=j;
                k=k+1;
            end
        end
    end
    CLOSED_COUNT=size(CLOSED,1);
    %set the starting node as the first node
    xNode=xStart;
    yNode=yStart;
    OPEN_COUNT=1;
    goal_distance=distance(xNode,yNode,xTarget,yTarget);
    path_cost=0;
    OPEN(OPEN_COUNT,:)=insert_open(xNode,yNode,xNode,yNode,goal_distance,path_cost,goal_distance);
    %OPEN(OPEN_COUNT,1)=0;
    CLOSED_COUNT=CLOSED_COUNT+1;
    CLOSED(CLOSED_COUNT,1)=xNode;
    CLOSED(CLOSED_COUNT,2)=yNode;
    NoPath=1;

%%
%This part is your homework
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% START ALGORITHM
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    while(NoPath) %you have to dicide the Conditions for while loop exit 
        min_i = min_fn(OPEN, OPEN_COUNT, xTarget, yTarget);
        if (min_i==-1)
            break;
        end
        
        if MAP(OPEN(min_i,2), OPEN(min_i,3))==0
            goal_index = min_i;
            NoPath=0;
            break;
        end

        exp_array = expand_array(OPEN(min_i,2), OPEN(min_i,3), OPEN(min_i,7), xTarget, yTarget, CLOSED, MAX_X, MAX_Y);
        exp_count = size(exp_array, 1);
        for i = 1:exp_count
            index = -1;
            for j = 1:OPEN_COUNT
                if (OPEN(j,2)==exp_array(i,1) && OPEN(j,3)==exp_array(i,2))
                    index = j;
                    break;
                end
            end

            if index==-1
                OPEN_COUNT = OPEN_COUNT + 1;
                OPEN(OPEN_COUNT,:) = insert_open(exp_array(i,1), exp_array(i,2), OPEN(min_i,2), OPEN(min_i,3), exp_array(i,3), exp_array(i,4), exp_array(i,5));
            else
                if exp_array(i,4) < OPEN(index,7)
                    OPEN(index, :) = insert_open(exp_array(i,1), exp_array(i,2), OPEN(min_i,2), OPEN(min_i,3), exp_array(i,3), exp_array(i,4), exp_array(i,5));
                end
            end
        end

       OPEN(min_i,1)=0;
       CLOSED_COUNT=CLOSED_COUNT+1;
       CLOSED(CLOSED_COUNT,1)=OPEN(min_i,2);
       CLOSED(CLOSED_COUNT,2)=OPEN(min_i,3);
        
     
    end %End of While Loop
    
    %Once algorithm has run The optimal path is generated by starting of at the
    %last node(if it is the target node) and then identifying its parent node
    %until it reaches the start node.This is the optimal path
    
    %
    %How to get the optimal path after A_star search?
    %please finish it
    %
    
   path = [];
   if ~NoPath
        i=1;
        cur_index = goal_index;
        while cur_index~=node_index(OPEN, xStart, yStart)
            path(i,1) = OPEN(cur_index,2);
            path(i,2) = OPEN(cur_index,3);
            cur_index = node_index(OPEN, OPEN(cur_index,4), OPEN(cur_index,5));
            i = i+1;
        end
        path(i,1) = xStart;
        path(i,2) = yStart;

        re = ['成功找到一条路径，拓展了', num2str(OPEN_COUNT), '个节点，总代价为:', num2str(OPEN(goal_index, 8))];
        disp(re);
   else
        disp('未找到路径');
    
    
end
